// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TransmissionApp.Api.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TorrentInfo
    {
        /// <summary>
        /// Initializes a new instance of the TorrentInfo class.
        /// </summary>
        public TorrentInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TorrentInfo class.
        /// </summary>
        public TorrentInfo(int? id = default(int?), int? addedDate = default(int?), int? bandwidthPriority = default(int?), string comment = default(string), int? corruptEver = default(int?), string creator = default(string), int? dateCreated = default(int?), long? desiredAvailable = default(long?), int? doneDate = default(int?), string downloadDir = default(string), string downloadedEver = default(string), string downloadLimit = default(string), string downloadLimited = default(string), int? error = default(int?), string errorString = default(string), int? eta = default(int?), int? etaIdle = default(int?), IList<TorrentFiles> files = default(IList<TorrentFiles>), IList<TorrentFileStats> fileStats = default(IList<TorrentFileStats>), string hashString = default(string), int? haveUnchecked = default(int?), long? haveValid = default(long?), bool? honorsSessionLimits = default(bool?), bool? isFinished = default(bool?), bool? isPrivate = default(bool?), bool? isStalled = default(bool?), long? leftUntilDone = default(long?), string magnetLink = default(string), int? manualAnnounceTime = default(int?), int? maxConnectedPeers = default(int?), double? metadataPercentComplete = default(double?), string name = default(string), int? peerLimit = default(int?), IList<TorrentPeers> peers = default(IList<TorrentPeers>), int? peersConnected = default(int?), TorrentPeersFrom peersFrom = default(TorrentPeersFrom), int? peersSendingToUs = default(int?), double? percentDone = default(double?), string pieces = default(string), int? pieceCount = default(int?), int? pieceSize = default(int?), IList<int?> priorities = default(IList<int?>), int? queuePosition = default(int?), int? rateDownload = default(int?), int? rateUpload = default(int?), double? recheckProgress = default(double?), int? secondsDownloading = default(int?), int? secondsSeeding = default(int?), int? seedIdleLimit = default(int?), int? seedIdleMode = default(int?), double? seedRatioLimit = default(double?), int? seedRatioMode = default(int?), long? sizeWhenDone = default(long?), int? startDate = default(int?), int? status = default(int?), IList<TorrentTrackers> trackers = default(IList<TorrentTrackers>), long? totalSize = default(long?), string torrentFile = default(string), long? uploadedEver = default(long?), int? uploadLimit = default(int?), bool? uploadLimited = default(bool?), double? uploadRatio = default(double?), IList<bool?> wanted = default(IList<bool?>), IList<string> webseeds = default(IList<string>), int? webseedsSendingToUs = default(int?))
        {
            Id = id;
            AddedDate = addedDate;
            BandwidthPriority = bandwidthPriority;
            Comment = comment;
            CorruptEver = corruptEver;
            Creator = creator;
            DateCreated = dateCreated;
            DesiredAvailable = desiredAvailable;
            DoneDate = doneDate;
            DownloadDir = downloadDir;
            DownloadedEver = downloadedEver;
            DownloadLimit = downloadLimit;
            DownloadLimited = downloadLimited;
            Error = error;
            ErrorString = errorString;
            Eta = eta;
            EtaIdle = etaIdle;
            Files = files;
            FileStats = fileStats;
            HashString = hashString;
            HaveUnchecked = haveUnchecked;
            HaveValid = haveValid;
            HonorsSessionLimits = honorsSessionLimits;
            IsFinished = isFinished;
            IsPrivate = isPrivate;
            IsStalled = isStalled;
            LeftUntilDone = leftUntilDone;
            MagnetLink = magnetLink;
            ManualAnnounceTime = manualAnnounceTime;
            MaxConnectedPeers = maxConnectedPeers;
            MetadataPercentComplete = metadataPercentComplete;
            Name = name;
            PeerLimit = peerLimit;
            Peers = peers;
            PeersConnected = peersConnected;
            PeersFrom = peersFrom;
            PeersSendingToUs = peersSendingToUs;
            PercentDone = percentDone;
            Pieces = pieces;
            PieceCount = pieceCount;
            PieceSize = pieceSize;
            Priorities = priorities;
            QueuePosition = queuePosition;
            RateDownload = rateDownload;
            RateUpload = rateUpload;
            RecheckProgress = recheckProgress;
            SecondsDownloading = secondsDownloading;
            SecondsSeeding = secondsSeeding;
            SeedIdleLimit = seedIdleLimit;
            SeedIdleMode = seedIdleMode;
            SeedRatioLimit = seedRatioLimit;
            SeedRatioMode = seedRatioMode;
            SizeWhenDone = sizeWhenDone;
            StartDate = startDate;
            Status = status;
            Trackers = trackers;
            TotalSize = totalSize;
            TorrentFile = torrentFile;
            UploadedEver = uploadedEver;
            UploadLimit = uploadLimit;
            UploadLimited = uploadLimited;
            UploadRatio = uploadRatio;
            Wanted = wanted;
            Webseeds = webseeds;
            WebseedsSendingToUs = webseedsSendingToUs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "addedDate")]
        public int? AddedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bandwidthPriority")]
        public int? BandwidthPriority { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "corruptEver")]
        public int? CorruptEver { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "creator")]
        public string Creator { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dateCreated")]
        public int? DateCreated { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "desiredAvailable")]
        public long? DesiredAvailable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "doneDate")]
        public int? DoneDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "downloadDir")]
        public string DownloadDir { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "downloadedEver")]
        public string DownloadedEver { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "downloadLimit")]
        public string DownloadLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "downloadLimited")]
        public string DownloadLimited { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public int? Error { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "errorString")]
        public string ErrorString { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "eta")]
        public int? Eta { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "etaIdle")]
        public int? EtaIdle { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "files")]
        public IList<TorrentFiles> Files { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileStats")]
        public IList<TorrentFileStats> FileStats { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hashString")]
        public string HashString { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "haveUnchecked")]
        public int? HaveUnchecked { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "haveValid")]
        public long? HaveValid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "honorsSessionLimits")]
        public bool? HonorsSessionLimits { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isFinished")]
        public bool? IsFinished { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isPrivate")]
        public bool? IsPrivate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isStalled")]
        public bool? IsStalled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "leftUntilDone")]
        public long? LeftUntilDone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "magnetLink")]
        public string MagnetLink { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "manualAnnounceTime")]
        public int? ManualAnnounceTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxConnectedPeers")]
        public int? MaxConnectedPeers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "metadataPercentComplete")]
        public double? MetadataPercentComplete { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "peerLimit")]
        public int? PeerLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "peers")]
        public IList<TorrentPeers> Peers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "peersConnected")]
        public int? PeersConnected { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "peersFrom")]
        public TorrentPeersFrom PeersFrom { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "peersSendingToUs")]
        public int? PeersSendingToUs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "percentDone")]
        public double? PercentDone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pieces")]
        public string Pieces { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pieceCount")]
        public int? PieceCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pieceSize")]
        public int? PieceSize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "priorities")]
        public IList<int?> Priorities { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "queuePosition")]
        public int? QueuePosition { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rateDownload")]
        public int? RateDownload { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rateUpload")]
        public int? RateUpload { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recheckProgress")]
        public double? RecheckProgress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "secondsDownloading")]
        public int? SecondsDownloading { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "secondsSeeding")]
        public int? SecondsSeeding { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "seedIdleLimit")]
        public int? SeedIdleLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "seedIdleMode")]
        public int? SeedIdleMode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "seedRatioLimit")]
        public double? SeedRatioLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "seedRatioMode")]
        public int? SeedRatioMode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sizeWhenDone")]
        public long? SizeWhenDone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startDate")]
        public int? StartDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public int? Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "trackers")]
        public IList<TorrentTrackers> Trackers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "totalSize")]
        public long? TotalSize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "torrentFile")]
        public string TorrentFile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uploadedEver")]
        public long? UploadedEver { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uploadLimit")]
        public int? UploadLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uploadLimited")]
        public bool? UploadLimited { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uploadRatio")]
        public double? UploadRatio { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "wanted")]
        public IList<bool?> Wanted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "webseeds")]
        public IList<string> Webseeds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "webseedsSendingToUs")]
        public int? WebseedsSendingToUs { get; set; }

    }
}
