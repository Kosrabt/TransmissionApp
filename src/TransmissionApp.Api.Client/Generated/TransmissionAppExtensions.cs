// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TransmissionApp.Api.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TransmissionApp.
    /// </summary>
    public static partial class TransmissionAppExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static int? ApiExecutionGet(this ITransmissionApp operations)
            {
                return operations.ApiExecutionGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> ApiExecutionGetAsync(this ITransmissionApp operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiExecutionGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<JobOutModel> ApiJobsGet(this ITransmissionApp operations)
            {
                return operations.ApiJobsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JobOutModel>> ApiJobsGetAsync(this ITransmissionApp operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiJobsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static JobOutModel ApiJobsPost(this ITransmissionApp operations, JobInModel value = default(JobInModel))
            {
                return operations.ApiJobsPostAsync(value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobOutModel> ApiJobsPostAsync(this ITransmissionApp operations, JobInModel value = default(JobInModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiJobsPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static JobOutModel ApiJobsByIdGet(this ITransmissionApp operations, string id)
            {
                return operations.ApiJobsByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobOutModel> ApiJobsByIdGetAsync(this ITransmissionApp operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiJobsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static JobOutModel ApiJobsByIdPut(this ITransmissionApp operations, string id, JobInModel value = default(JobInModel))
            {
                return operations.ApiJobsByIdPutAsync(id, value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobOutModel> ApiJobsByIdPutAsync(this ITransmissionApp operations, string id, JobInModel value = default(JobInModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiJobsByIdPutWithHttpMessagesAsync(id, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiJobsByIdDelete(this ITransmissionApp operations, string id)
            {
                operations.ApiJobsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiJobsByIdDeleteAsync(this ITransmissionApp operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiJobsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            public static IList<RuleOutModel> ApiRulesGet(this ITransmissionApp operations, string jobId = default(string))
            {
                return operations.ApiRulesGetAsync(jobId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RuleOutModel>> ApiRulesGetAsync(this ITransmissionApp operations, string jobId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRulesGetWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static RuleOutModel ApiRulesPost(this ITransmissionApp operations, string jobId = default(string), RuleInModel value = default(RuleInModel))
            {
                return operations.ApiRulesPostAsync(jobId, value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RuleOutModel> ApiRulesPostAsync(this ITransmissionApp operations, string jobId = default(string), RuleInModel value = default(RuleInModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRulesPostWithHttpMessagesAsync(jobId, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='jobId'>
            /// </param>
            public static RuleOutModel ApiRulesByIdGet(this ITransmissionApp operations, string id, string jobId = default(string))
            {
                return operations.ApiRulesByIdGetAsync(id, jobId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RuleOutModel> ApiRulesByIdGetAsync(this ITransmissionApp operations, string id, string jobId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRulesByIdGetWithHttpMessagesAsync(id, jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static RuleOutModel ApiRulesByIdPut(this ITransmissionApp operations, string id, string jobId = default(string), RuleInModel value = default(RuleInModel))
            {
                return operations.ApiRulesByIdPutAsync(id, jobId, value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RuleOutModel> ApiRulesByIdPutAsync(this ITransmissionApp operations, string id, string jobId = default(string), RuleInModel value = default(RuleInModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRulesByIdPutWithHttpMessagesAsync(id, jobId, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='jobId'>
            /// </param>
            public static void ApiRulesByIdDelete(this ITransmissionApp operations, string id, string jobId = default(string))
            {
                operations.ApiRulesByIdDeleteAsync(id, jobId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiRulesByIdDeleteAsync(this ITransmissionApp operations, string id, string jobId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiRulesByIdDeleteWithHttpMessagesAsync(id, jobId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static SettingsOutModel ApiSettingsGet(this ITransmissionApp operations)
            {
                return operations.ApiSettingsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SettingsOutModel> ApiSettingsGetAsync(this ITransmissionApp operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiSettingsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiSettingsPut(this ITransmissionApp operations, SettingsInModel value = default(SettingsInModel))
            {
                operations.ApiSettingsPutAsync(value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiSettingsPutAsync(this ITransmissionApp operations, SettingsInModel value = default(SettingsInModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiSettingsPutWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static AllTorrents ApiTorrentsGet(this ITransmissionApp operations)
            {
                return operations.ApiTorrentsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AllTorrents> ApiTorrentsGetAsync(this ITransmissionApp operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTorrentsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiTorrentsPost(this ITransmissionApp operations, string value = default(string))
            {
                operations.ApiTorrentsPostAsync(value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTorrentsPostAsync(this ITransmissionApp operations, string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTorrentsPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static string ApiTorrentsByIdGet(this ITransmissionApp operations, int id)
            {
                return operations.ApiTorrentsByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiTorrentsByIdGetAsync(this ITransmissionApp operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTorrentsByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiTorrentsByIdPut(this ITransmissionApp operations, int id, string value = default(string))
            {
                operations.ApiTorrentsByIdPutAsync(id, value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTorrentsByIdPutAsync(this ITransmissionApp operations, int id, string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTorrentsByIdPutWithHttpMessagesAsync(id, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiTorrentsByIdDelete(this ITransmissionApp operations, int id)
            {
                operations.ApiTorrentsByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTorrentsByIdDeleteAsync(this ITransmissionApp operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTorrentsByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
